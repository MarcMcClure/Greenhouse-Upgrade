5/15/2025
okay so i need the following for the MVP

ESP32-WROOM-32/ESP32 DevKit v1
DS18B20 Temp Sensor
12V→5V Buck Converter
assorted resisters
assorted LEDs
Bread Board
jumpers

logic

PLC inputs
	sensor bits
		upper temp high
		upper temp low
		lower temp high
		lower temp low
		humidity high
		humidity low
	buttons	(for version 1.2)
		manual mode button
		open vent button
		close vent button
		circulation fan button
		heater button
	safety
		vent open limit switch (Unpressed = 1, Pressed = 0)
		vent closed limit switch (Unpressed = 1, Pressed = 0)
		battery low

PLC intermediates
	vent should be open

PLC outputs
	vent motor (forward, reverse, or off)
	circulation fan (on, off)
	heater (on, off)

PLC Logic
	(upper temp high ∧ lower temp high) ∨ (humidity high ∧ ¬ upper temp low ∧ ¬ lower temp low)) -> vent should be open
	vent open limit switch ∧ vent should be open -> vent motor forward
	vent closed limit switch ∧ ¬ vent should be open -> vent motor reverse

	(upper temp high ∧ lower temp low) ∨ (upper temp low ∧ lower temp high) -> big temp diff
	big temp diff -> circulation fan on

	upper temp low ∧ lower temp low ∧ vent closed limit switch ∧ ¬ battery low  -> heater on

5/16/2025
instructions on getting vs code set up for Arduino and ESP32-DevKitC
https://docs.platformio.org/en/latest/tutorials/espressif32/arduino_debugging_unit_testing.html

I needed to manually download and install the Silicon Labs CP210x USB to UART Bridge VCP driver to get Windows to recognize the device.
When you create the project the platform is espressif32 and the framework is arduino
after that just copy the main.cpp file and run per docs
I have not touched a microcontroler in a couple years so the goal for v0.1 is just to get the indicater LED to flash

5/16/2025
The goal for v0.2 is to get the arduino to do a caluclationa and then  print the output to the tak moniter via the USB

The goal for v0.3 is to get the temp sensor working. 
	It will light a red LED when i warm the sensor with my hand and a blue LED when it is closed
	It will print the sensor reading to the output to the task moniter via the USB

I'm using a 5.1K ohm instead of a 4.7 K Ohm resister to connect the data because I have it on hand. It's technically in spec but not recomended. 
	I got an extra long cabel so the higher resistivity may be an issue in which case I will have to do some resister math. We will see.

Im having to use a jumper (the brown one) to connect the 3.3v to the power rail because i cant find a second breadboard.

I cheeped out and didnt get the breakout board for the DS18B20 Temp Sensor and boy was that a mistake. stripping and winning the wires was 
	a pain in the ass but shome boards are on their way.

You'll need the libraries OneWire and DallasTemperature to get the temp sensor working.

5/17/2025

The goal for v0.4 is to get the wifi and a a slimmed down REST api working which had 3 methods. this will be the v1.0 api.
	GET "/data" which returns a json like { "temp_c": 21.69 }
	GET "/settings" which returns a json like {"updateIntervalMs": 1000,"criticalTempC": 32.00}
	PUT "/settings" with params like "?interval=2000&criticalTempC=30"

TODO: I need to set up unit tests for get data, get settings, put setting, and a bad api call.

5/18/2025

v1.0 added 2 more temp sensors so i can moniter temp at the top of the greenhouse, bottom of the greenhouse, and outside. 
	deployed outside over night on an existing 12v solar system I had lying around with a buck converter.
	LEDs now indicated based on the average of the 3 sensors.

TODO: add shades/hoods for temp sensors so they are not affected by direct sunlight
TODO: add limits on settings ranges
TODO: clean up comments
TODO: switch to freedom units
TODO: update readme

5/22/2025

TODO: add protection for low battery.

v 1.1 added a fan that sho0ld help with tempreture stratification.
	GET "/data" which returns a json like { "temps_c": { "top": 20.81, "bottom": 7.62, "outside": 10.50 } }
	GET "/settings" which returns a json like {"updateIntervalMs": 1000,"hotTempC": 25.00,"coldTempC": 10.00,"runFanTempDiffC": 3.00}
	PUT "/settings" with params like "?interval=2000&hotTempC=26&coldTempC=9&runFanTempDiffC=2"

5/28/2025
	upgrading to freeRTOS
	startind using mutex protection for all functions acessing the temp sensor but then decided to just ahve them acess temps via currentTemperaturesC and only let updateTemp query the temp sensors

TODO: add vent hardware and software
TODO: Add MQTT support for LAN/cloud messaging
TODO: add alexa/google home controls
TODO: Build android app
TODO: build web dashboard
TODO: add tests, and diagnostics for stack and heap usage
TODO: add error logging

5/30/2025

I'm comeing to realize I should have used native ESP-IDF rather than arduino. I want to switch over but first im going to finish the following:
	set up as comprehensive a set of unit tests as i can without mockup GPIO
	upgrade my REST API to MQTT
	build a super basic andriod app

TODO: upgrade from arduino to ESP-IDF
TODO: abstract hardware from software to make testing easier.
TODO: add mockup tests for curently untestiable functions (after ESP-IDF upgrade)